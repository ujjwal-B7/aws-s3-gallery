import express from "express";

import multer from "multer";
import sharp from "sharp";
import crypto from "crypto";

//db
import pool from "./config/db.js";
import { creataGalleryTable, dropGalleryTable } from "./models/gallery.js";

import { getSignedUrl } from "@aws-sdk/cloudfront-signer";

// creataGalleryTable();
// dropGalleryTable()

import { uploadFile, deleteFile, getObjectSignedUrl } from "./s3.js";

const port = process.env.PORT || 8888;

const app = express();
app.use(express.json());

// multer setup for memory storage
const upload = multer({ storage: multer.memoryStorage() });

// generating random file names
const generateFileName = (bytes = 32) =>
  crypto.randomBytes(bytes).toString("hex");

app.get("/api/v1/posts", async (req, res) => {
  const posts = await pool.query("SELECT * FROM gallery");
  for (let post of posts.rows) {
    // previously using signed url because our bucket is private and to allow client to view files we need a signed url
    // post.avatar_url = await getObjectSignedUrl(post.avatar_url);

    // since we have cloudfront setup, now we are not generating signedurl, instead attaching cloudfront url with imagurl and on behalf of client, clodufront access our files directly from s3
    // post.avatar_url = `https://da8wkoo3xh46c.cloudfront.net/${post.avatar_url}`

    // using signed url even using cloudfront to restrict access if url is shared to differnt users and also expiring it with certain period of time

    post.avatar_url = getSignedUrl({
      url: `https://da8wkoo3xh46c.cloudfront.net/${post.avatar_url}`,
      dateLessThan: new Date(Date.now() + 1000 * 60 * 60 * 24),
      privateKey: process.env.CLOUDFRONT_PRIVATE_KEY, // key generated by openssl
      keyPairId: process.env.CLOUDFRONT_KEY_PAIR_ID, // id of public key in key management
    });
  }

  res.send(posts.rows);
});

app.post("/api/v1/upload-post", upload.single("avatar"), async (req, res) => {
  try {
    const { caption } = req.body;
    const file = req.file;

    const imageName = generateFileName();

    const fileBuffer = await sharp(file.buffer)
      .resize({
        height: 1080,
        width: 1080,
        fit: "contain",
      })
      .toBuffer();

    await uploadFile(fileBuffer, imageName, file.mimetype);

    await pool.query(
      `INSERT INTO gallery (caption,avatar_url) VALUES ($1,$2)`,
      [caption, imageName]
    );

    res.status(201).json({
      message: "Post created successfully.",
      success: true,
      data: { caption, imageName },
    });
  } catch (error) {
    throw new Error(error);
  }
});

app.delete("/api/v1/post/:id", async (req, res) => {
  const id = req.params.id;

  const result = await pool.query(
    "DELETE FROM gallery WHERE id= $1 RETURNING *",
    [+id]
  );

  const deletedPost = result.rows[0];

  await deleteFile(deletedPost.avatar_url);

  res.send("Deleted");
});

app.listen(port, () => {
  console.log("Server started on port " + port);
});
